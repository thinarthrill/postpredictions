# -*- coding: utf-8 -*-
"""postpredictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tOUktdlOq1DjSQ0LTeZncYbEVtg2MaWp
"""

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
!pip install google-cloud-storage colarama pydantic=1.10.13 pydantic==1.10.9 instagrapi==1.16.27 threads_api==1.0.1

!pip install "pydantic<2.0"

import os
import json
import random
import time
from datetime import datetime
from google.cloud import storage
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PREDICTIONS_FILE = "postpredictions/predictions.json"
POSTED_FILE = "postpredictions/posted_today.json"
BUCKET = "thinarthrillbucket"  # –±–µ–∑ /postpredictions ‚Äî —ç—Ç–æ –ø–∞–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ bucket
WEBHOOK = "https://hook.eu2.make.com/35dyered8mobg4rk1p553u4zgzxpcdvf"


# === –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ dict –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ ===
def init_gcs_client():
    key_str = os.getenv("GCS_KEY_JSON")
    print(key_str)
    if not key_str:
        raise ValueError("‚ùå GCS_KEY_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ .env –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
  key_dict = json.loads(key_str)

  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
  with open("gcs_key.json", "w") as f:
      json.dump(key_dict, f)

  os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcs_key.json"
  return storage.Client()

# === –ó–∞–≥—Ä—É–∑–∫–∞ JSON –∏–∑ GCS ===
def gcs_load_json(bucket_name, gcs_path):
    client = init_gcs_client()
    bucket = client.get_bucket(bucket_name)
    blob = bucket.blob(gcs_path)

    if not blob.exists():
        print(f"‚ö† –§–∞–π–ª {gcs_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bucket {bucket_name}")
        return None

    content = blob.download_as_text()
    try:
        data = json.loads(content)
    except json.JSONDecodeError:
        print(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {gcs_path}")
        return None

    print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {gcs_path}")
    return data

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –≤ GCS ===
def upload_to_gcs(bucket_name, gcs_filename, data):
    client = init_gcs_client()
    bucket = client.get_bucket(bucket_name)
    blob = bucket.blob(gcs_filename)
    blob.upload_from_string(
        json.dumps(data, ensure_ascii=False, indent=2),
        content_type="application/json"
    )
    print("üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GCS:", blob.public_url)
    return blob.public_url

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Make.com ===
def send_to_make(text):
    try:
        response = requests.post(WEBHOOK, json={"text": text})
        if response.status_code == 200:
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Make: {text[:40]}...")
        else:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    today = datetime.now().strftime("%Y-%m-%d")

    posted_today = gcs_load_json(BUCKET, POSTED_FILE)
    if not isinstance(posted_today, dict) or posted_today.get("date") != today:
        posted_today = {"date": today, "titles": []}

    predictions_data = gcs_load_json(BUCKET, PREDICTIONS_FILE)
    if not isinstance(predictions_data, list):
        print("‚ö† –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
        return

    today_entry = next((day for day in predictions_data if day["date"] == today), None)
    if not today_entry:
        print(f"‚ö† –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
    post_to_publish = next(
        (post for post in today_entry["posts"] if post["title"] not in posted_today["titles"]),
        None
    )

    if not post_to_publish:
        print("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")
        return

    # –ü—É–±–ª–∏–∫—É–µ–º
    send_to_make(post_to_publish["text"])
    posted_today["titles"].append(post_to_publish["title"])
    upload_to_gcs(BUCKET, POSTED_FILE, posted_today)
    print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {post_to_publish['title']}")

if __name__ == "__main__":
    main()

from google.cloud import storage
import json

def gcs_load_json(filename):
    try:
        client = storage.Client.from_service_account_json("gcs_key.json")  # –ø—É—Ç—å –∫ –∫–ª—é—á—É
        bucket = client.bucket(BUCKET)  # —Ç–≤–æ–π bucket
        blob = bucket.blob(filename)
        data = blob.download_as_text()
        return json.loads(data)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} –∏–∑ GCS: {e}")
        return None

gcs_load_json("predictions.json")

from google.cloud import storage

def gcs_debug(filename):
    try:
        client = storage.Client.from_service_account_json("gcs_key.json")
        bucket = client.bucket(BUCKET)
        blob = bucket.blob(filename)
        raw_data = blob.download_as_text()
        print("=== RAW DATA ===")
        print(raw_data[:500])  # –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        print("=== TYPE ===", type(raw_data))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

gcs_debug("posted_today.json")

